definitions:
  dto.ApiResponseFail:
    properties:
      message:
        type: string
      status:
        type: integer
    type: object
  dto.ApiResponseSuccessNoData:
    properties:
      message:
        type: string
      status:
        type: integer
    type: object
  dto.ApiResponseSuccessStruct:
    properties:
      code:
        example: 200
        type: integer
      data:
        example: "null"
        type: string
      message:
        example: Success
        type: string
    type: object
  dto.AssignmentUpdateRequest:
    properties:
      departmentId:
        type: integer
      userId:
        type: integer
    type: object
  dto.CheckPasswordReset:
    properties:
      email:
        type: string
      redirectUrl:
        type: string
    required:
    - email
    - redirectUrl
    type: object
  dto.ConfirmRequestTransferRequest:
    properties:
      assetId:
        type: integer
    required:
    - assetId
    type: object
  dto.CreateCategoryRequest:
    properties:
      categoryName:
        type: string
    required:
    - categoryName
    type: object
  dto.CreateCompanyRequest:
    properties:
      companyName:
        type: string
      email:
        type: string
    type: object
  dto.CreateDepartmentRequest:
    properties:
      departmentName:
        type: string
      locationId:
        type: integer
    required:
    - departmentName
    - locationId
    type: object
  dto.CreateLocationRequest:
    properties:
      locationName:
        type: string
    required:
    - locationName
    type: object
  dto.CreateMaintenanceSchedulesRequest:
    properties:
      assetId:
        type: integer
      endDate:
        type: string
      startDate:
        type: string
    required:
    - assetId
    - endDate
    - startDate
    type: object
  dto.CreateRequestTransferRequest:
    properties:
      categoryId:
        type: integer
      description:
        type: string
    required:
    - categoryId
    - description
    type: object
  dto.RefreshRequest:
    properties:
      refreshToken:
        type: string
    required:
    - refreshToken
    type: object
  dto.RetiredAssetRequest:
    properties:
      residualValue:
        type: number
    required:
    - residualValue
    type: object
  dto.UpdateMaintenanceSchedulesRequest:
    properties:
      endDate:
        type: string
      startDate:
        type: string
    required:
    - endDate
    - startDate
    type: object
  dto.UpdateRoleUserRequest:
    properties:
      slug:
        type: string
      userId:
        type: integer
    required:
    - slug
    - userId
    type: object
  dto.UserLoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.UserRegisterRequest:
    properties:
      email:
        type: string
      firstName:
        maxLength: 30
        minLength: 2
        type: string
      lastName:
        maxLength: 30
        minLength: 2
        type: string
      password:
        minLength: 6
        type: string
      redirectUrl:
        type: string
    required:
    - email
    - firstName
    - lastName
    - password
    - redirectUrl
    type: object
  dto.UserRequestResetPassword:
    properties:
      newPassword:
        type: string
      token:
        type: string
    required:
    - newPassword
    - token
    type: object
  dto.UserUpdateDepartmentRequest:
    properties:
      departmentId:
        type: integer
      userId:
        type: integer
    type: object
info:
  contact: {}
paths:
  /api/CheckAndSenMaintenanceNotification:
    get:
      consumes:
      - application/json
      description: CheckAndSenMaintenanceNotification
      produces:
      - application/json
      responses: {}
      summary: CheckAndSenMaintenanceNotification
      tags:
      - Cron
  /api/SendEmailsForWarrantyExpiry:
    get:
      consumes:
      - application/json
      description: SendEmailsForWarrantyExpiry
      produces:
      - application/json
      responses: {}
      summary: SendEmailsForWarrantyExpiry
      tags:
      - Cron
  /api/UpdateStatusWhenFinishMaintenance:
    get:
      consumes:
      - application/json
      description: UpdateStatusWhenFinishMaintenance
      produces:
      - application/json
      responses: {}
      summary: UpdateStatusWhenFinishMaintenance
      tags:
      - Cron
  /api/assets:
    get:
      consumes:
      - application/json
      description: Get all assets
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Get all assets
      tags:
      - Assets
    post:
      consumes:
      - multipart/form-data
      description: Create assets
      parameters:
      - description: Asset Name
        in: formData
        name: assetName
        required: true
        type: string
      - description: Purchase Date (RFC3339 format, e.g. 2023-04-15T10:00:00Z)
        in: formData
        name: purchaseDate
        required: true
        type: string
      - description: Cost
        in: formData
        name: cost
        required: true
        type: number
      - description: Warranty Expiry (RFC3339 format, e.g. 2023-12-31T23:59:59Z)
        in: formData
        name: warrantExpiry
        required: true
        type: string
      - description: Serial Number
        in: formData
        name: serialNumber
        required: true
        type: string
      - description: Category ID
        in: formData
        name: categoryId
        required: true
        type: integer
      - description: Department ID
        in: formData
        name: departmentId
        required: true
        type: integer
      - description: redirect url
        in: formData
        name: redirectUrl
        required: true
        type: string
      - description: File to upload
        in: formData
        name: file
        required: true
        type: file
      - description: Image to upload
        in: formData
        name: image
        required: true
        type: file
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Create assets
      tags:
      - Assets
  /api/assets-log/{asset_id}:
    get:
      consumes:
      - application/json
      description: Get assets log by id
      parameters:
      - description: id
        in: path
        name: asset_id
        required: true
        type: string
      - in: query
        name: action
        type: string
      - in: query
        name: companyId
        type: integer
      - in: query
        name: depId
        type: integer
      - in: query
        name: endTime
        type: string
      - in: query
        name: startTime
        type: string
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Get assets log by id
      tags:
      - Assets log
  /api/assets-retired/{id}:
    patch:
      consumes:
      - application/json
      description: Retired assets
      parameters:
      - description: Data
        in: body
        name: ResidualValue
        required: true
        schema:
          $ref: '#/definitions/dto.RetiredAssetRequest'
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Retired assets
      tags:
      - Assets
  /api/assets/{id}:
    delete:
      consumes:
      - application/json
      description: Delete assets
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Delete assets
      tags:
      - Assets
    get:
      consumes:
      - application/json
      description: Get assets
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Get assets
      tags:
      - Assets
    put:
      consumes:
      - multipart/form-data
      description: Update assets
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: Asset Name
        in: formData
        name: assetName
        required: true
        type: string
      - description: Purchase Date (RFC3339 format, e.g. 2023-04-15T10:00:00Z)
        in: formData
        name: purchaseDate
        required: true
        type: string
      - description: Cost
        in: formData
        name: cost
        required: true
        type: number
      - description: Warranty Expiry (RFC3339 format, e.g. 2023-12-31T23:59:59Z)
        in: formData
        name: warrantExpiry
        required: true
        type: string
      - description: Serial Number
        in: formData
        name: serialNumber
        required: true
        type: string
      - description: Category ID
        in: formData
        name: categoryId
        required: true
        type: integer
      - description: File to upload
        in: formData
        name: file
        required: true
        type: file
      - description: Image to upload
        in: formData
        name: image
        required: true
        type: file
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Update assets
      tags:
      - Assets
  /api/assets/filter:
    get:
      consumes:
      - application/json
      description: Get all assets have permission
      parameters:
      - in: query
        name: assetName
        type: string
      - in: query
        name: categoryId
        type: string
      - in: query
        name: companyId
        type: integer
      - in: query
        name: cost
        type: string
      - in: query
        name: departmentId
        type: string
      - in: query
        name: email
        type: string
      - in: query
        name: serialNumber
        type: string
      - in: query
        name: status
        type: string
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Get all assets with filter
      tags:
      - Assets
  /api/assets/filter-dashboard:
    get:
      consumes:
      - application/json
      description: Get dashboard
      parameters:
      - in: query
        name: categoryId
        type: string
      - in: query
        name: departmentId
        type: string
      - description: '"csv" hoặc "pdf" hoặc ""'
        in: query
        name: export
        type: string
      - in: query
        name: status
        type: string
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Get dashboard
      tags:
      - Assets
  /api/assets/maintenance-schedules:
    get:
      consumes:
      - application/json
      description: Get asset haven't maintenance schedules
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Get asset haven't maintenance schedules
      tags:
      - Assets
  /api/assets/request-transfer:
    get:
      consumes:
      - application/json
      description: Get asset by category of department
      parameters:
      - in: query
        name: categoryId
        type: integer
      - in: query
        name: departmentId
        type: integer
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Get asset by category of department
      tags:
      - Assets
  /api/assignments/{id}:
    get:
      consumes:
      - application/json
      description: Get assignment
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Get assignment
      tags:
      - Assignments
    put:
      consumes:
      - application/json
      description: Update assignment
      parameters:
      - description: Data
        in: body
        name: assignment
        required: true
        schema:
          $ref: '#/definitions/dto.AssignmentUpdateRequest'
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Update assignment
      tags:
      - Assignments
  /api/assignments/filter:
    get:
      consumes:
      - application/json
      description: Get all assign have permission
      parameters:
      - in: query
        name: assetName
        type: string
      - in: query
        name: companyId
        type: integer
      - in: query
        name: emailAssign
        type: string
      - in: query
        name: emailAssigned
        type: string
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Get all assign with filter
      tags:
      - Assignments
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ApiResponseSuccessStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ApiResponseFail'
      summary: Login
      tags:
      - Auth
  /api/auth/logout:
    post:
      consumes:
      - application/json
      description: Logout
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ApiResponseSuccessNoData'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ApiResponseFail'
      security:
      - JWT: []
      summary: Logout
      tags:
      - Auth
  /api/auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh Token
      parameters:
      - description: Data
        in: body
        name: refresh_token
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ApiResponseSuccessStruct'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ApiResponseFail'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ApiResponseFail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ApiResponseFail'
      summary: Refresh Token
      tags:
      - Auth
  /api/auth/register:
    post:
      consumes:
      - application/json
      description: Register user
      parameters:
      - description: Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserRegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.ApiResponseSuccessNoData'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ApiResponseFail'
      summary: Register user
      tags:
      - Auth
  /api/categories:
    get:
      consumes:
      - application/json
      description: Get all categories
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Get all categories
      tags:
      - Categories
    post:
      consumes:
      - application/json
      description: Create categories
      parameters:
      - description: Data
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCategoryRequest'
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Create categories
      tags:
      - Categories
  /api/categories/{id}:
    delete:
      consumes:
      - application/json
      description: Delete category via id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Delete category
      tags:
      - Categories
  /api/company:
    post:
      consumes:
      - application/json
      description: Create Company
      parameters:
      - description: Data
        in: body
        name: department
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCompanyRequest'
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Create Company
      tags:
      - Company
  /api/company/{id}:
    get:
      consumes:
      - application/json
      description: Create Company by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Get Company by id
      tags:
      - Company
  /api/departments:
    get:
      consumes:
      - application/json
      description: Get all departments
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Get all departments
      tags:
      - Departments
    post:
      consumes:
      - application/json
      description: Create departments
      parameters:
      - description: Data
        in: body
        name: department
        required: true
        schema:
          $ref: '#/definitions/dto.CreateDepartmentRequest'
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Create departments
      tags:
      - Departments
  /api/departments/{id}:
    delete:
      consumes:
      - application/json
      description: Delete department via id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Delete department
      tags:
      - Departments
  /api/locations:
    get:
      consumes:
      - application/json
      description: Get all location
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Get all location
      tags:
      - Locations
    post:
      consumes:
      - application/json
      description: Create location
      parameters:
      - description: Data
        in: body
        name: location
        required: true
        schema:
          $ref: '#/definitions/dto.CreateLocationRequest'
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Create Location
      tags:
      - Locations
  /api/locations/{id}:
    delete:
      consumes:
      - application/json
      description: Delete location via id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Delete location
      tags:
      - Locations
  /api/maintenance-schedules:
    get:
      consumes:
      - application/json
      description: Get maintenanceSchedules
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Get maintenanceSchedules
      tags:
      - MaintenanceSchedules
    post:
      consumes:
      - application/json
      description: Create maintenanceSchedules
      parameters:
      - description: Data
        in: body
        name: MaintenanceSchedules
        required: true
        schema:
          $ref: '#/definitions/dto.CreateMaintenanceSchedulesRequest'
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Create maintenanceSchedules
      tags:
      - MaintenanceSchedules
  /api/maintenance-schedules/{id}:
    delete:
      consumes:
      - application/json
      description: Delete maintenanceSchedules by id
      parameters:
      - description: maintenance_id
        in: path
        name: id
        required: true
        type: integer
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Delete maintenanceSchedules by id
      tags:
      - MaintenanceSchedules
    get:
      consumes:
      - application/json
      description: Get maintenanceSchedules
      parameters:
      - description: asset_id
        in: path
        name: id
        required: true
        type: integer
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Get maintenanceSchedules by assetId
      tags:
      - MaintenanceSchedules
    patch:
      consumes:
      - application/json
      description: Update maintenanceSchedules by id
      parameters:
      - description: Data
        in: body
        name: MaintenanceSchedules
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateMaintenanceSchedulesRequest'
      - description: maintenance_id
        in: path
        name: id
        required: true
        type: integer
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Update maintenanceSchedules by id
      tags:
      - MaintenanceSchedules
  /api/notifications:
    get:
      consumes:
      - application/json
      description: Get notifications by user id
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Get notifications by user id
      tags:
      - Notification
  /api/notifications/{id}:
    put:
      consumes:
      - application/json
      description: Update notification
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Update notification
      tags:
      - Notification
  /api/request-transfer:
    post:
      consumes:
      - application/json
      description: Request Transfer
      parameters:
      - description: Data
        in: body
        name: Request-Transfer
        required: true
        schema:
          $ref: '#/definitions/dto.CreateRequestTransferRequest'
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Request Transfer
      tags:
      - RequestTransfer
  /api/request-transfer/{id}:
    get:
      consumes:
      - application/json
      description: Get request transfer
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Get request transfer
      tags:
      - RequestTransfer
  /api/request-transfer/confirm/{id}:
    patch:
      consumes:
      - application/json
      description: Accept Request Transfer
      parameters:
      - description: Data
        in: body
        name: Asset
        required: true
        schema:
          $ref: '#/definitions/dto.ConfirmRequestTransferRequest'
      - description: request_transfer_id
        in: path
        name: id
        required: true
        type: integer
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Accept Request Transfer
      tags:
      - RequestTransfer
  /api/request-transfer/deny/{id}:
    patch:
      consumes:
      - application/json
      description: Deny Request Transfer
      parameters:
      - description: request_transfer_id
        in: path
        name: id
        required: true
        type: integer
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Deny Request Transfer
      tags:
      - RequestTransfer
  /api/request-transfer/filter:
    get:
      consumes:
      - application/json
      description: Get all request transfer have permission
      parameters:
      - in: query
        name: companyId
        type: integer
      - in: query
        name: depId
        type: integer
      - in: query
        name: status
        type: string
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Get all RequestTransfer with filter
      tags:
      - RequestTransfer
  /api/roles:
    get:
      consumes:
      - application/json
      description: GetRole
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: GetRole
      tags:
      - Roles
  /api/sse:
    get:
      consumes:
      - application/json
      description: GetRole
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: GetRole
      tags:
      - Sockets
  /api/user/{email}:
    delete:
      consumes:
      - application/json
      description: Delete user via email
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      - description: email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ApiResponseSuccessNoData'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ApiResponseFail'
      security:
      - JWT: []
      summary: Delete user
      tags:
      - Users
  /api/user/can-export/{user_id}:
    patch:
      consumes:
      - application/json
      description: Update can-export by userId
      parameters:
      - description: user_id
        in: path
        name: user_id
        required: true
        type: string
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Update can-export by userId
      tags:
      - Users
  /api/user/department:
    patch:
      consumes:
      - application/json
      description: Update department by id
      parameters:
      - description: Data
        in: body
        name: department
        required: true
        schema:
          $ref: '#/definitions/dto.UserUpdateDepartmentRequest'
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ApiResponseSuccessStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ApiResponseFail'
      security:
      - JWT: []
      summary: Update department by id
      tags:
      - Users
  /api/user/department/{department_id}:
    get:
      consumes:
      - application/json
      description: Get all user by department_id
      parameters:
      - description: department_id
        in: path
        name: department_id
        required: true
        type: string
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Get all user by department_id
      tags:
      - Users
  /api/user/forget-password:
    post:
      consumes:
      - application/json
      description: Email reset password
      parameters:
      - description: Data
        in: body
        name: Email_Reset_Password
        required: true
        schema:
          $ref: '#/definitions/dto.CheckPasswordReset'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ApiResponseSuccessNoData'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ApiResponseFail'
      summary: Email reset password
      tags:
      - Users
  /api/user/head-department/{user_id}:
    patch:
      consumes:
      - application/json
      description: Update head department by userId
      parameters:
      - description: user_id
        in: path
        name: user_id
        required: true
        type: string
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Update head department by userId
      tags:
      - Users
  /api/user/information:
    patch:
      consumes:
      - application/json
      description: Update Information
      parameters:
      - description: firstName
        in: formData
        name: firstName
        required: true
        type: string
      - description: lastName
        in: formData
        name: lastName
        required: true
        type: string
      - description: avatar to upload
        in: formData
        name: avatar
        type: file
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ApiResponseSuccessStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ApiResponseFail'
      security:
      - JWT: []
      summary: Update Information
      tags:
      - Users
  /api/user/manager-department/{user_id}:
    patch:
      consumes:
      - application/json
      description: Update head department by userId
      parameters:
      - description: user_id
        in: path
        name: user_id
        required: true
        type: string
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Update head department by userId
      tags:
      - Users
  /api/user/password-reset:
    patch:
      consumes:
      - application/json
      description: reset password
      parameters:
      - description: Data
        in: body
        name: Password-reset
        required: true
        schema:
          $ref: '#/definitions/dto.UserRequestResetPassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ApiResponseSuccessNoData'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ApiResponseFail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ApiResponseFail'
      summary: Password-reset
      tags:
      - Users
  /api/user/session:
    get:
      consumes:
      - application/json
      description: Get session
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ApiResponseSuccessStruct'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ApiResponseFail'
      security:
      - JWT: []
      summary: Get session
      tags:
      - Users
  /api/users:
    get:
      consumes:
      - application/json
      description: Get all user
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ApiResponseSuccessStruct'
      security:
      - JWT: []
      summary: Get all user
      tags:
      - Users
  /api/users/not-dep:
    get:
      consumes:
      - application/json
      description: Get user haven't dep
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ApiResponseSuccessStruct'
      security:
      - JWT: []
      summary: Get user haven't dep
      tags:
      - Users
  /api/users/role:
    patch:
      consumes:
      - application/json
      description: Update role by id
      parameters:
      - description: Data
        in: body
        name: Role
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateRoleUserRequest'
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ApiResponseSuccessStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ApiResponseFail'
      security:
      - JWT: []
      summary: Update role by id
      tags:
      - Roles
swagger: "2.0"
